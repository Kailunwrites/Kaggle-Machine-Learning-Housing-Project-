lambda = best_lambda_ridge, #
# lambda = grid,
alpha = 0, # 1 = lasso, 0 = ridge
# standardize.response = TRUE, #standardizing the response variable (SalePrice_log).
trace.it = 1#show progress bar
# intercept = TRUE
)
plot(ridge)
plot(ridge, xvar = "lambda", label=T)
abline(v=log(best_lambda_ridge), col="black", lwd=3, lty=2)
# coeffs ###
coef(ridge)
# predicting/rmse ###
ridge_predicted <- predict(ridge, hp_feat_pred)
ModelMetrics::rmse(hp_feat$SalePrice_log, ridge_predicted)
ridge_residuals <- data.frame("res" = ridge_predicted-hp_feat$SalePrice_log)
ggplot(data = ridge_residuals, aes(x=s0)) + geom_density() +
xlab('Residuals') + ylab('') +
ggtitle('Density of Residuals from Ridge') +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank())
ggsave(
'Density of Residuals from Ridge.png',
plot = last_plot(),
scale = 1,
width = 5,
height = 3,
units = c('in'),
dpi = 300
)
ggplot(data = lasso_residuals, aes(x=s0)) + geom_density() +
xlab('Residuals') + ylab('') +
ggtitle('Density of Residuals from Lasso') +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank())
ggplot(data = ridge_residuals, aes(x=s0)) + geom_density() +
xlab('Residuals') + ylab('') +
ggtitle('Density of Residuals from Ridge') +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank())
?cv.glment
??cv.glment
??cv.glmnet
# library ####
library(dplyr)
library(ggplot2)
library(glmnet)
# call data ####
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
load('../Data/train_all.RData')
load('../Data/test_all_v2.RData')
# remove SalePrice and ID####
# unnecessary for lm
hp_feat <- hp_feat %>% select(-SalePrice, -Id)
hp_feat_test <- hp_feat_test %>% select(-Id)
# standardized columns ###
# hp_feat_std <- hp_feat %>% mutate_if(is.numeric, ~(scale(.) %>% as.vector))
#check if response variable is normal
ggplot(data = hp_feat, aes(x=SalePrice_log)) + geom_density()
plot(density(hp_feat$SalePrice_log))
# prepping matricies ####
hp_feat_pred <- model.matrix(SalePrice_log~. , hp_feat)[,-1]
hp_feat_resp <- hp_feat$SalePrice_log
hp_feat_test_pred <- model.matrix(SalePrice_log~. , hp_feat)[,-1]
hp_feat_test_resp <- hp_feat_test$SalePrice_log
# lasso ####
# finding lambda for lasso ###
# find lambda thru cross validation glmnet
cv.lasso <- cv.glmnet(x = hp_feat_pred,
y = hp_feat_resp,
type.measure = 'mse',
alpha = 1 # 1 = lasso, 0 = ridge
# standardize.response = FALSE, #standardizing the response variable (Saleprice_log).
# trace.it = 1, #show progress bar
# intercept = TRUE
)
cv.lasso.m <- cv.glmnet(x = hp_feat_pred,
y = hp_feat_resp,
type.measure = 'mse',
alpha = 1,
lambda = grid)
best_lambda_lasso <- cv.lasso$lambda.min
grid = 10^seq(1, -5, length = 100)
# building lasso ###
lasso <- glmnet(x = hp_feat_pred,
y = hp_feat_resp,
# family = 'gaussian',
lambda = best_lambda_lasso,
# lambda = grid, #
alpha = 1, # 1 = lasso, 0 = ridge
# standardize.response = TRUE, #standardizing the response variable (SalePrice_log).
trace.it = 1#show progress bar
# intercept = TRUE
)
lasso$cvm
cv.lasso$cvm
sqrt(mean(cv.lasso$cvm))
cv.lasso$lambda
sqrt(cv.lasso$cvm[cv.lasso$lambda == cv.lasso$lambda.min])
# building lasso ###
lasso <- glmnet(x = hp_feat_pred,
y = hp_feat_resp,
# family = 'gaussian',
lambda = best_lambda_lasso,
# lambda = grid, #
alpha = 1, # 1 = lasso, 0 = ridge
# standardize.response = TRUE, #standardizing the response variable (SalePrice_log).
trace.it = 1#show progress bar
# intercept = TRUE
)
# predicting/rmse/plots ###
lasso_predicted <- predict(lasso, hp_feat_pred)
ModelMetrics::rmse(hp_feat$SalePrice_log, lasso_predicted)
# select only the variables that houseowners can flip.
hp_feat_flip <- hp_feat %>%
select(OverallQual, OverallCond, MasVnrArea, ExterQual, BedroomAbvGr, KitchenAbvGr,
Fireplaces, WoodDeckSF, TotBaths, HasPool, HasDeck, HasPorch, HasStoneMas,
KitchenQual_Fa, KitchenQual_Gd, KitchenQual_TA,
BsmtCond_Gd, BsmtCond_None, BsmtCond_Po, BsmtCond_TA,
HeatingQC_Fa, HeatingQC_Gd, HeatingQC_Po, HeatingQC_TA,
GarageType_Attchd, GarageType_Basment, GarageType_BuiltIn, GarageType_CarPort,
GarageType_Detchd, GarageType_None,
GarageFinish_None, GarageFinish_RFn, GarageFinish_Unf,
SalePrice_log)
# prepping matricies ####
hp_feat_flip_pred <- model.matrix(SalePrice_log~. , hp_feat_flip)[,-1]
hp_feat_flip_resp <- hp_feat_flip$SalePrice_log
# select only the variables that houseowners can flip.
hp_feat_flip <- hp_feat %>%
select(OverallQual, OverallCond, MasVnrArea, ExterQual, BedroomAbvGr, KitchenAbvGr,
Fireplaces, WoodDeckSF, TotBaths, HasPool, HasDeck, HasPorch, HasStoneMas,
KitchenQual_Fa, KitchenQual_Gd, KitchenQual_TA,
BsmtCond_Gd, BsmtCond_None, BsmtCond_Po, BsmtCond_TA,
HeatingQC_Fa, HeatingQC_Gd, HeatingQC_Po, HeatingQC_TA,
GarageType_Attchd, GarageType_Basment, GarageType_BuiltIn, GarageType_CarPort,
GarageType_Detchd, GarageType_None,
GarageFinish_None, GarageFinish_RFn, GarageFinish_Unf,
SalePrice_log)
# call data ####
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
load('../Data/train_all.RData')
# remove SalePrice and ID####
# unnecessary for lm
hp_feat <- hp_feat %>% select(-SalePrice, -Id)
# select only the variables that houseowners can flip.
hp_feat_flip <- hp_feat %>%
select(OverallQual, OverallCond, MasVnrArea, ExterQual, BedroomAbvGr, KitchenAbvGr,
Fireplaces, WoodDeckSF, TotBaths, HasPool, HasDeck, HasPorch, HasStoneMas,
KitchenQual_Fa, KitchenQual_Gd, KitchenQual_TA,
BsmtCond_Gd, BsmtCond_None, BsmtCond_Po, BsmtCond_TA,
HeatingQC_Fa, HeatingQC_Gd, HeatingQC_Po, HeatingQC_TA,
GarageType_Attchd, GarageType_Basment, GarageType_BuiltIn, GarageType_CarPort,
GarageType_Detchd, GarageType_None,
GarageFinish_None, GarageFinish_RFn, GarageFinish_Unf,
SalePrice_log)
# prepping matricies ####
hp_feat_flip_pred <- model.matrix(SalePrice_log~. , hp_feat_flip)[,-1]
hp_feat_flip_resp <- hp_feat_flip$SalePrice_log
# finding lambda for lasso ####
# find lambda thru cross validation glmnet
cv.lasso_flip <- cv.glmnet(x = hp_feat_flip_pred,
y = hp_feat_flip_resp,
type.measure = 'mse',
alpha = 1 # 1 = lasso, 0 = ridge
# standardize.response = FALSE, #standardizing the response variable (Saleprice_log).
# trace.it = 1, #show progress bar
# intercept = TRUE
)
best_lambda_lasso_flip <- cv.lasso_flip$lambda.min
# building lasso ####
lasso_flip <- glmnet(x = hp_feat_flip_pred,
y = hp_feat_flip_resp,
# family = 'gaussian',
lambda = best_lambda_lasso_flip, #
alpha = 1, # 1 = lasso, 0 = ridge
# standardize.response = TRUE, #standardizing the response variable (SalePrice_log).
trace.it = 1#show progress bar
# intercept = TRUE
)
hp_feat_flip_resp <- hp_feat_flip$SalePrice_log
# select only the variables that houseowners can flip.
hp_feat_flip <- hp_feat %>%
select(OverallQual, OverallCond, MasVnrArea, ExterQual, BedroomAbvGr, KitchenAbvGr,
Fireplaces, WoodDeckSF, TotBaths, HasPool, HasDeck, HasPorch, HasStoneMas,
KitchenQual_Fa, KitchenQual_Gd, KitchenQual_TA,
BsmtCond_Gd, BsmtCond_None, BsmtCond_Po, BsmtCond_TA,
HeatingQC_Fa, HeatingQC_Gd, HeatingQC_Po, HeatingQC_TA,
GarageType_Attchd, GarageType_Basment, GarageType_BuiltIn, GarageType_CarPort,
GarageType_Detchd, GarageType_None,
GarageFinish_None, GarageFinish_RFn, GarageFinish_Unf,
SalePrice_log)
# library ####
library(dplyr)
library(ggplot2)
library(glmnet)
# call data ####
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
load('../Data/train_all.RData')
# remove SalePrice and ID####
# unnecessary for lm
hp_feat <- hp_feat %>% select(-SalePrice, -Id)
# select only the variables that houseowners can flip.
hp_feat_flip <- hp_feat %>%
select(OverallQual, OverallCond, MasVnrArea, ExterQual, BedroomAbvGr, KitchenAbvGr,
Fireplaces, WoodDeckSF, TotBaths, HasPool, HasDeck, HasPorch, HasStoneMas,
KitchenQual_Fa, KitchenQual_Gd, KitchenQual_TA,
BsmtCond_Gd, BsmtCond_None, BsmtCond_Po, BsmtCond_TA,
HeatingQC_Fa, HeatingQC_Gd, HeatingQC_Po, HeatingQC_TA,
GarageType_Attchd, GarageType_Basment, GarageType_BuiltIn, GarageType_CarPort,
GarageType_Detchd, GarageType_None,
GarageFinish_None, GarageFinish_RFn, GarageFinish_Unf,
SalePrice_log)
# select only the variables that houseowners can flip.
hp_feat_flip <- hp_feat %>%
dplyr::select(OverallQual, OverallCond, MasVnrArea, ExterQual, BedroomAbvGr, KitchenAbvGr,
Fireplaces, WoodDeckSF, TotBaths, HasPool, HasDeck, HasPorch, HasStoneMas,
KitchenQual_Fa, KitchenQual_Gd, KitchenQual_TA,
BsmtCond_Gd, BsmtCond_None, BsmtCond_Po, BsmtCond_TA,
HeatingQC_Fa, HeatingQC_Gd, HeatingQC_Po, HeatingQC_TA,
GarageType_Attchd, GarageType_Basment, GarageType_BuiltIn, GarageType_CarPort,
GarageType_Detchd, GarageType_None,
GarageFinish_None, GarageFinish_RFn, GarageFinish_Unf,
SalePrice_log)
# prepping matricies ####
hp_feat_flip_pred <- model.matrix(SalePrice_log~. , hp_feat_flip)[,-1]
hp_feat_flip_resp <- hp_feat_flip$SalePrice_log
# finding lambda for lasso ####
# find lambda thru cross validation glmnet
cv.lasso_flip <- cv.glmnet(x = hp_feat_flip_pred,
y = hp_feat_flip_resp,
type.measure = 'mse',
alpha = 1 # 1 = lasso, 0 = ridge
# standardize.response = FALSE, #standardizing the response variable (Saleprice_log).
# trace.it = 1, #show progress bar
# intercept = TRUE
)
best_lambda_lasso_flip <- cv.lasso_flip$lambda.min
# building lasso ####
lasso_flip <- glmnet(x = hp_feat_flip_pred,
y = hp_feat_flip_resp,
# family = 'gaussian',
lambda = best_lambda_lasso_flip, #
alpha = 1, # 1 = lasso, 0 = ridge
# standardize.response = TRUE, #standardizing the response variable (SalePrice_log).
trace.it = 1#show progress bar
# intercept = TRUE
)
# coeffs
coef(lasso_flip)
# predicting/rmse
lasso_flip_predicted <- predict(lasso_flip, hp_feat_flip_pred)
ModelMetrics::rmse(hp_feat$SalePrice_log, lasso_flip_predicted)
plot(lasso_flip)
plot(lasso_flip, xvar = "lambda", label=T)
abline(v=log(best_lambda_lasso_flip), col="black", lwd=3, lty=2)
plot(lasso_flip)
plot(lasso_flip, xvar = "lambda", label=T)
abline(v=log(best_lambda_lasso_flip), col="black", lwd=3, lty=2)
plot(cv.lasso_flip)
plot(cv.lasso_flip, xvar = "lambda", label=T)
abline(v=log(best_lambda_lasso_flip), col="black", lwd=3, lty=2)
# visualization the coeffs ##########
plot(lasso)
load('../Data/train_all.RData')
load('../Data/test_all_v2.RData')
# remove SalePrice and ID####
# unnecessary for lm
hp_feat <- hp_feat %>% select(-SalePrice, -Id)
# remove SalePrice and ID####
# unnecessary for lm
hp_feat <- hp_feat %>% dplyr::select(-SalePrice, -Id)
hp_feat_test <- hp_feat_test %>% dplyr::select(-Id)
#check if response variable is normal
ggplot(data = hp_feat, aes(x=SalePrice_log)) + geom_density()
# prepping matricies ####
hp_feat_pred <- model.matrix(SalePrice_log~. , hp_feat)[,-1]
hp_feat_resp <- hp_feat$SalePrice_log
hp_feat_test_pred <- model.matrix(SalePrice_log~. , hp_feat)[,-1]
hp_feat_test_resp <- hp_feat_test$SalePrice_log
# finding lambda for lasso ###
# find lambda thru cross validation glmnet
cv.lasso <- cv.glmnet(x = hp_feat_pred,
y = hp_feat_resp,
type.measure = 'mse',
alpha = 1 # 1 = lasso, 0 = ridge
# standardize.response = FALSE, #standardizing the response variable (Saleprice_log).
# trace.it = 1, #show progress bar
# intercept = TRUE
)
best_lambda_lasso <- cv.lasso$lambda.min
grid = 10^seq(1, -5, length = 100)
# building lasso ###
lasso <- glmnet(x = hp_feat_pred,
y = hp_feat_resp,
# family = 'gaussian',
lambda = best_lambda_lasso,
# lambda = grid, #
alpha = 1, # 1 = lasso, 0 = ridge
# standardize.response = TRUE, #standardizing the response variable (SalePrice_log).
trace.it = 1#show progress bar
# intercept = TRUE
)
# coeffs ###
coef(lasso)
# visualization the coeffs ##########
plot(lasso)
plot(lasso, xvar = "lambda", label=T)
abline(v=log(best_lambda_lasso), col="black", lwd=3, lty=2)
# building lasso ###
lasso <- glmnet(x = hp_feat_pred,
y = hp_feat_resp,
# family = 'gaussian',
# lambda = best_lambda_lasso,
lambda = grid, #
alpha = 1, # 1 = lasso, 0 = ridge
# standardize.response = TRUE, #standardizing the response variable (SalePrice_log).
trace.it = 1#show progress bar
# intercept = TRUE
)
# visualization the coeffs ##########
plot(lasso)
plot(lasso, xvar = "lambda", label=T)
abline(v=log(best_lambda_lasso), col="black", lwd=3, lty=2)
# building lasso ####
grid = 10^seq(1, -5, length = 100)
lasso_flip <- glmnet(x = hp_feat_flip_pred,
y = hp_feat_flip_resp,
# family = 'gaussian',
# lambda = best_lambda_lasso_flip,
lambda = grid,
alpha = 1, # 1 = lasso, 0 = ridge
# standardize.response = TRUE, #standardizing the response variable (SalePrice_log).
trace.it = 1#show progress bar
# intercept = TRUE
)
plot(lasso_flip)
plot(lasso_flip)
plot(lasso_flip, xvar = "lambda", label=T)
lasso_flip <- glmnet(x = hp_feat_flip_pred,
y = hp_feat_flip_resp,
# family = 'gaussian',
# lambda = best_lambda_lasso_flip,
lambda = grid,
alpha = 1, # 1 = lasso, 0 = ridge
# standardize.response = TRUE, #standardizing the response variable (SalePrice_log).
trace.it = 1#show progress bar
# intercept = TRUE
)
load('../Data/train_all.RData')
# remove SalePrice and ID####
# unnecessary for lm
hp_feat <- hp_feat %>% select(-SalePrice, -Id)
# select only the variables that houseowners can flip.
hp_feat_flip <- hp_feat %>%
dplyr::select(OverallQual, OverallCond, MasVnrArea, ExterQual, BedroomAbvGr, KitchenAbvGr,
Fireplaces, WoodDeckSF, TotBaths, HasPool, HasDeck, HasPorch, HasStoneMas,
KitchenQual_Fa, KitchenQual_Gd, KitchenQual_TA,
BsmtCond_Gd, BsmtCond_None, BsmtCond_Po, BsmtCond_TA,
HeatingQC_Fa, HeatingQC_Gd, HeatingQC_Po, HeatingQC_TA,
GarageType_Attchd, GarageType_Basment, GarageType_BuiltIn, GarageType_CarPort,
GarageType_Detchd, GarageType_None,
GarageFinish_None, GarageFinish_RFn, GarageFinish_Unf,
SalePrice_log)
# prepping matricies ####
hp_feat_flip_pred <- model.matrix(SalePrice_log~. , hp_feat_flip)[,-1]
hp_feat_flip_resp <- hp_feat_flip$SalePrice_log
# finding lambda for lasso ####
# find lambda thru cross validation glmnet
cv.lasso_flip <- cv.glmnet(x = hp_feat_flip_pred,
y = hp_feat_flip_resp,
type.measure = 'mse',
alpha = 1 # 1 = lasso, 0 = ridge
# standardize.response = FALSE, #standardizing the response variable (Saleprice_log).
# trace.it = 1, #show progress bar
# intercept = TRUE
)
best_lambda_lasso_flip <- cv.lasso_flip$lambda.min
# building lasso ####
grid = 10^seq(1, -5, length = 100)
lasso_flip <- glmnet(x = hp_feat_flip_pred,
y = hp_feat_flip_resp,
# family = 'gaussian',
# lambda = best_lambda_lasso_flip,
lambda = grid,
alpha = 1, # 1 = lasso, 0 = ridge
# standardize.response = TRUE, #standardizing the response variable (SalePrice_log).
trace.it = 1#show progress bar
# intercept = TRUE
)
# predicting/rmse
lasso_flip_predicted <- predict(lasso_flip, hp_feat_flip_pred)
ModelMetrics::rmse(hp_feat$SalePrice_log, lasso_flip_predicted)
plot(lasso_flip)
plot(lasso_flip, xvar = "lambda", label=T)
abline(v=log(best_lambda_lasso_flip), col="black", lwd=3, lty=2)
best_lambda_lasso_flip
log(best_lambda_lasso_flip)
coef(lasso_flip)
lasso_flip <- glmnet(x = hp_feat_flip_pred,
y = hp_feat_flip_resp,
# family = 'gaussian',
lambda = best_lambda_lasso_flip,
# lambda = grid,
alpha = 1, # 1 = lasso, 0 = ridge
# standardize.response = TRUE, #standardizing the response variable (SalePrice_log).
trace.it = 1#show progress bar
# intercept = TRUE
)
# coeffs
coef(lasso_flip)
ModelMetrics::rmse(hp_feat$SalePrice_log, lasso_flip_predicted)
resid(forwardAIC)
# library ####
library(dplyr)
library(MASS)
library(ggplot2)
# call data####
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
load('../Data/train_all.RData')
options(max.print=2000)
# str(hp_feat)
# colnames(hp_feat)
hp_feat <- hp_feat %>% dplyr::select(.,-Id, -SalePrice)
# baseline model####
baselinemodel <- lm(data = hp_feat, formula = SalePrice_log ~ .)
summary(baselinemodel)
model.empty = lm(SalePrice_log ~ 1, data = hp_feat) #The model with an intercept ONLY.
model.full = baselinemodel #The model with ALL variables.
scope = list(lower = formula(model.empty), upper = formula(model.full))
#Stepwise regression using AIC as the criteria (the penalty k = 2).
forwardAIC = step(model.empty, scope, direction = "forward", k = 2)
backwardAIC = step(model.full, scope, direction = "backward", k = 2)
resid(forwardAIC)
# residual scatterplots ####
resid.forward <- resid(forwardAIC)
resid.backward <- resid(backwardAIC)
plot(hp_feat$SalePrice_log, resid.forward
ylab="Residuals", xlab="log(SalePrice)",
main="Forward AIC Residuals")
plot(hp_feat$SalePrice_log, resid.forward,
ylab="Residuals", xlab="log(SalePrice)",
main="Forward AIC Residuals")
plot(hp_feat$SalePrice_log, resid.forward,
ylab="Residuals", xlab="log(SalePrice)",
main="Forward AIC Residuals")
abline(0, 0)
plot(hp_feat$SalePrice_log, resid.backward,
ylab="Residuals", xlab="log(SalePrice)",
main="Backward AIC Residuals")
abline(0, 0)
resid.backward <- resid(backwardAIC)
plot(hp_feat$SalePrice_log, resid.forward,
ylab="Residuals", xlab="log(SalePrice)",
main="Forward AIC Residuals")
abline(0, 0)
plot(hp_feat$SalePrice_log, resid.backward,
ylab="Residuals", xlab="log(SalePrice)",
main="Backward AIC Residuals")
abline(0, 0)
# library ####
library(dplyr)
library(ggplot2)
library(glmnet)
# call data ####
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
load('../Data/train_all.RData')
# remove SalePrice and ID####
# unnecessary for lm
hp_feat <- hp_feat %>% select(-SalePrice, -Id)
# select only the variables that houseowners can flip.
hp_feat_flip <- hp_feat %>%
dplyr::select(OverallQual, OverallCond, MasVnrArea, ExterQual, BedroomAbvGr, KitchenAbvGr,
Fireplaces, WoodDeckSF, TotBaths, HasPool, HasDeck, HasPorch, HasStoneMas,
KitchenQual_Fa, KitchenQual_Gd, KitchenQual_TA,
BsmtCond_Gd, BsmtCond_None, BsmtCond_Po, BsmtCond_TA,
HeatingQC_Fa, HeatingQC_Gd, HeatingQC_Po, HeatingQC_TA,
GarageType_Attchd, GarageType_Basment, GarageType_BuiltIn, GarageType_CarPort,
GarageType_Detchd, GarageType_None,
GarageFinish_None, GarageFinish_RFn, GarageFinish_Unf,
SalePrice_log)
# prepping matricies ####
hp_feat_flip_pred <- model.matrix(SalePrice_log~. , hp_feat_flip)[,-1]
hp_feat_flip_resp <- hp_feat_flip$SalePrice_log
# finding lambda for lasso ####
# find lambda thru cross validation glmnet
cv.lasso_flip <- cv.glmnet(x = hp_feat_flip_pred,
y = hp_feat_flip_resp,
type.measure = 'mse',
alpha = 1 # 1 = lasso, 0 = ridge
# standardize.response = FALSE, #standardizing the response variable (Saleprice_log).
# trace.it = 1, #show progress bar
# intercept = TRUE
)
best_lambda_lasso_flip <- cv.lasso_flip$lambda.min
# building lasso ####
grid = 10^seq(1, -5, length = 100)
lasso_flip <- glmnet(x = hp_feat_flip_pred,
y = hp_feat_flip_resp,
# family = 'gaussian',
# lambda = best_lambda_lasso_flip,
lambda = grid,
alpha = 1, # 1 = lasso, 0 = ridge
# standardize.response = TRUE, #standardizing the response variable (SalePrice_log).
trace.it = 1#show progress bar
# intercept = TRUE
)
# coeffs
coef(lasso_flip)
plot(lasso_flip)
plot(lasso_flip, xvar = "lambda", label=T)
abline(v=log(best_lambda_lasso_flip), col="black", lwd=3, lty=2)
